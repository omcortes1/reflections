1. What happens when you initialize a repository? Why do you need to do it?
What happens is that opens a hidden directory called .git where all the
meta-data of the history of the files is going to be stored. It DOES NOT create the first commit for you.
Why need to do it in order to start saving the metadata in that part. I don't know!!!

2. How is the staging area different from the working directory and the repository? What value do you think it offers?
Staging area is were all the drafts of changes are. This is a transient space between the working directory and the repository.
The Working directory does not have the history information or metadata.
The process is like this
working directory --(add file 1)-->staging area --(just one commit for all)--> repository
                  --(add file_N)-->
3. How can you use the staging area to make sure you have one commit per logical change?
One can possibly just add only the files that make sense for the logical change...

4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When trying something new but not ready to commit it in the master branch. Also, when something has to be tested before
by an user to get approved. In the branch you can have any development while your master is the core, working branch.
We can understand master as the production quality stuff, while the branches are under development and might brake.

5. How do the diagrams help you visualize the branch structure?
It helps to understand what things are included in each branch and what are the potential
problems at the moment of merging...

6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The result is the comparison between three commits the head of the two branches and the commit were those two were the same.
From were the two branches were the same it can delete or add whatever was deleted or added in the two branches
if there are no logical problems (I am guessing).
